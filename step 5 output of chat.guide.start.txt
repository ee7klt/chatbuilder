Congrats, You have all the tools you need to build your own chat client! Your goal in this project will be to create a chat application by using HTML, CSS, JS, and jQuery, and by making HTTP requests to a server in the background, via JavaScript. (You won't need to edit the server, that part is all handled for you.) You can see a working example version of the chat client at http://chatbuilder.hackreactor.com/chatbuilder.html?example=1.

We've provided 3 helper functions that can do most of the work for you at first, so you should start by figuring out how those work and building your client on top of them. Next, you'll be asked to delete those helpers and rebuild their functionality. By going in this order, you'll have a strong understanding of the project at a high level before you begin tackling the harder details. If you're new to developing for the web, you may find it useful to refer to the tutorials "Try jQuery" (http://try.jquery.com/) and "Explore and Master Chrome DevTools" (http://discover-devtools.codeschool.com/).

Ok, get started! You'll need to complete each of the following steps, probably in this order since each one builds on the previous.

1. Experiment with the  Chat.display()  helper
* Play in the developer console until you can get it to show an example message in the user-facing viewport.
*  Chat.display()  takes a string as its only input, and displays that string to the user in a bulleted list.
*  Chat.display()  won't work unless there is a  ul  element visible on the page with the class  messages . 

2. Experiment with the  Chat.fetch()  helper
* This function downloads the most recent messages from the server and makes them available to you.
* Note that it is asyncronous in nature, so it doesn't return anything. Instead, it accepts a function as its only argument.  (When a function is passed as an argument, we call it a 'callback'.)
* When  .fetch()  is done fetching messages from the server, it will call your callback function, passing an array of strings as the only argument to the callback. Each string in that array is the text value of one chat message. 

3. Hook the two together
* Using these two functions, and a bit more code, you can build an app that displays the most recent messages available from the server every time you refresh the page. 

4. Set your app up to refresh the list of messages every 3 seconds.
5. Experiment with the  Chat.send()  helper
6. Allow the user to enter their own chat messages via the input box.
7. Woohoo, you're done with beginner phase--time to delete the helpers!
8. Add  delete Chat.display;  as the first line of your JS.
9. Add  delete Chat.fetch;  as the second line of your JS.
10. Add  delete Chat.send;  as the third line of your JS.

You can access more detailed explanations of each step by passing the step number into  Chat.guide() . When you need help, please reach out to your interviewer rather than a friend--We're happy to help! ChatBuilder.js:11
event.returnValue is deprecated. Please use the standard event.preventDefault() instead. ChatBuilder.js:2